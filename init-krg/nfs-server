#!/bin/sh

### BEGIN INIT INFO
# Provides:          nfs-server
# Required-Start:    $portmap $time
# Required-Stop:     $time
# Default-Start:     2 3 4 5 S
# Default-Stop:      0 1 6
# Short-Description: NFS server for Kerrighed root container
# Description:       NFS server for Kerrighed main node to share
#                    its root filesystem
### END INIT INFO

# What is this?
DESC="NFS root server"

# Read config
DEFAULTFILE=/etc/kerrighed/nfs-server.conf
NEED_STATD=yes
NEED_IDMAPD=yes
PIPEFS_MOUNTPOINT=/var/lib/nfs/rpc_pipefs
PROCNFSD_MOUNTPOINT=/proc/fs/nfsd
if [ -f $DEFAULTFILE ]; then
    . $DEFAULTFILE
fi

SSD_VERB="--quiet"

. /lib/lsb/init-functions

# Exit if required binaries are missing.
[ -x /sbin/rpc.statd ] || exit 0
[ -x /usr/sbin/rpc.nfsd    ] || exit 0
[ -x /usr/sbin/rpc.mountd  ] || exit 0
[ -x /usr/sbin/exportfs    ] || exit 0

do_modprobe() {
    if [ -x /sbin/modprobe -a -f /proc/modules ]
    then
        modprobe -q "$1" || true
    fi
}

do_mount() {
    if ! grep -E -qs "$1\$" /proc/filesystems
    then
	return 1
    fi
    if ! mountpoint -q "$2"
    then
	mount -t "$1" "$1" "$2"
	return
    fi
    return 0
}

do_umount() {
    if mountpoint -q "$1"
    then
	umount "$1"
    fi
    return 0
}

# See how we were called.
case "$1" in
  start)
	log_daemon_msg "Starting $DESC"

	if [ "$NEED_STATD" = yes ]; then
	    log_progress_msg "statd"
	    /sbin/rpc.statd $STATDOPTS
	    RET=$?
	    if [ $RET != 0 ]; then
	        log_end_msg $RET
	        exit $RET
	    fi
	fi

	# Don't start idmapd if we don't have them (say, if /usr is not
	# up yet).
	[ -x /usr/sbin/rpc.idmapd ] || NEED_IDMAPD=no

	if [ "$NEED_IDMAPD" = yes ]
	then
	    do_modprobe sunrpc
	    do_modprobe nfs
	    do_modprobe nfsd
	    if do_mount rpc_pipefs $PIPEFS_MOUNTPOINT
	    then
	        log_progress_msg "idmapd"
		/usr/sbin/rpc.idmapd
		RET=$?
	        if [ $RET != 0 ]; then
        	    log_end_msg $RET
        	    exit $RET
                fi
	    fi
	fi

	log_end_msg 0

	do_modprobe nfsd

	# See if our running kernel supports the NFS kernel server
	if ! grep -E -qs "[[:space:]]nfsd\$" /proc/filesystems; then
	    log_warning_msg "Not starting nfs kernel server: no support in current kernel."
	    exit 0
	fi
		
	do_mount nfsd $PROCNFSD_MOUNTPOINT

	[ -n "$EXPORTOPTS" ] && opts="-o $EXPORTOPTS"
	log_begin_msg "Exporting directories for $DESC..."
	for network in $(ip route | grep -v ^default | awk '{ print $1 }') 127.0.0.1/32; do
	    /usr/sbin/exportfs $opts $network:/
	done	
	RET=$?
	if [ $RET != 0 ]; then
	    log_end_msg $RET
	    exit $RET
	fi
	log_end_msg 0

	log_daemon_msg "Starting $DESC"
	log_progress_msg "nfsd"
	nice -n $RPCNFSDPRIORITY /usr/sbin/rpc.nfsd $RPCNFSDOPTS $RPCNFSDCOUNT
	RET=$?
	if [ $RET != 0 ]; then
	    log_end_msg $RET
	    exit $RET
	fi

	# make sure 127.0.0.1 is a valid source for requests
	ClearAddr=
	if [ -f /proc/net/rpc/auth.unix.ip/channel ]
	then
	    fgrep -qs 127.0.0.1 /proc/net/rpc/auth.unix.ip/content || {
		echo "nfsd 127.0.0.1 2147483647 localhost" >/proc/net/rpc/auth.unix.ip/channel
		ClearAddr=yes
	    }
	fi

	/usr/bin/rpcinfo -u localhost nfs 3 >/dev/null 2>&1 ||
	RPCMOUNTDOPTS="$RPCMOUNTDOPTS --no-nfs-version 3"

	[ -z "$ClearAddr" ] || echo "nfsd 127.0.0.1 1" >/proc/net/rpc/auth.unix.ip/channel
	
	log_progress_msg "mountd"
	/usr/sbin/rpc.mountd $RPCMOUNTDOPTS
	RET=$?
	if [ $RET != 0 ]; then
	    log_end_msg $RET
	    exit $RET
	fi

	log_end_msg 0
	;;

  stop)
	log_daemon_msg "Stopping $DESC"

	log_progress_msg "mountd"
	start-stop-daemon --stop --oknodo $SSD_VERB \
	    --name rpc.mountd --user 0
	RET=$?
	if [ $RET != 0 ]; then
		log_end_msg $RET
		exit $RET
	fi

	log_progress_msg "nfsd"
	start-stop-daemon --stop --oknodo $SSD_VERB \
	    --name nfsd --user 0 --signal 2
	RET=$?
	if [ $RET != 0 ]; then
		log_end_msg $RET
		exit $RET
	fi

	log_end_msg 0

	log_begin_msg "Unexporting directories for nfs kernel server..."
	/usr/sbin/exportfs -au
	RET=$?
	if [ $RET != 0 ]; then
		log_end_msg $RET
		exit $RET
	fi
	log_end_msg 0

	if mountpoint -q $PROCNFSD_MOUNTPOINT
	then
	    /usr/sbin/exportfs -f
	fi

	if [ "$NEED_IDMAPD" = yes ]
	then
	    log_progress_msg "idmapd"
	    start-stop-daemon --stop --oknodo $SSD_VERB \
		--name rpc.idmapd
            RET=$?
	    if [ $RET != 0 ]; then
                log_end_msg $RET
                exit $RET
            fi
	fi
	if [ "$NEED_STATD" = yes ]
	then
	    log_progress_msg "statd"
	    start-stop-daemon --stop --oknodo $SSD_VERB \
	        --name rpc.statd
	    RET=$?
	    if [ $RET != 0 ]; then
                log_end_msg $RET
                exit $RET
            fi
	fi
	do_umount $PIPEFS_MOUNTPOINT 2>/dev/null || true
	log_end_msg 0
	;;

  status)
	if ! pidof nfsd >/dev/null
	then
	    echo "nfsd not running"
	    exit 3
	fi

	if [ "$NEED_STATD" = yes ]
	then
	    if ! pidof rpc.statd >/dev/null
	    then
	        echo "rpc.statd not running"
	        exit 3
	    fi
	fi

	if [ "$NEED_IDMAPD" = yes ]
	then
            if ! pidof rpc.idmapd >/dev/null
	    then
		echo "rpc.idmapd not running"
		exit 3
	    fi
	fi

	echo "all daemons running"
	exit 0
	;;

  restart | force-reload)
	$0 stop
	sleep 1
	$0 start
	;;

  *)
	log_success_msg "Usage: nfs-server {start|stop|status|restart}"
	exit 1
	;;
esac

exit 0
