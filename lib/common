#!/bin/bash -e
#
# common functions
dft_valueinput=${basedir}/var/vars.default
dft_valuecheck=${basedir}/var/vars.check
dft_msg=${basedir}/var/vars.msg

valueinput=${valueinput:-${dft_valueinput}}

[ -e ${dft_valuecheck} ] && . ${dft_valuecheck}

function k_load_var_saved
{
    k_load_var_file ${k_valuesoutput_tmp} ${1}
}

function k_load_var_default
{
    k_load_var_file ${valueinput} ${1}
}

function k_load_var_file
{
    if [ -z "${1}" -a -z "${2}" ]
    then
	echo "k_load_var_file: missing argument" >&2
	exit 1
    fi
    local file=${1}
    local name=${2}
    local value
    
    if [ -e ${file} ]
    then
	value=$(awk '/^'${name}' / { print $2 }' ${file})
	eval export ${name}=\"${value}\"
    fi
}

function k_load_var_user
{
    if [ -z "${1}" ]
    then
	echo "k_load_var_user: missing argument" >&2
	exit 1
    fi
    local name=${1}
    local value
    local msg=$(k_var_message ${name})
    read -e -p "${msg}> " value
    value=$(echo "${value}" | sed 's/^\s*\(.*\)\s*/\1/')
    if set | egrep -q "^k_check_var_${name} ()"; then
	while ! eval "k_check_var_${name} ${value}"; do
	    echo "${name}: incorrect value"
	    read -e -p "${msg}> " value
	    value=$(echo "${value}" | sed 's/^\s*\(.*\)\s*/\1/')
	done
    fi
    eval export ${name}=\"${value}\"
}

function k_var_message
{
    if [ -z "${1}" ]
    then
	echo "k_var_message: missing argument" >&2
	exit 1
    fi
    local name=${1}
    local msg=

    if [ -e ${dft_msg} ]
    then
	msg=$(sed '/^'${name}' /!d; s/^'${name}' //' ${dft_msg})
    else
	echo "k_var_message: missing file ${dft_msg}" >&2
	exit 1
    fi

    if [ -z "${msg}" ]
    then
	echo "k_var_message: unknown variable ${name}" >&2
	exit 1
    fi

    echo ${msg}
}

function k_save_var
{
    if [ -z "${1}" -a -z "${2}" ]
    then
	echo "k_load_var_file: missing argument" >&2
	exit 1
    fi
    name="${1}"
    value="${2}"

    echo "${name} ${value}" >> ${k_valuesoutput_tmp}
}

function k_load_var
{
    if [ -z "${1}" ]
    then
	echo "k_load_var: missing argument" >&2
	exit 1
    fi
    local name=${1}

    k_load_var_saved ${name}
    if [ -z "$(eval echo \$${name})" ]
    then
	if [ ! ${interactive} ]
	then
	    k_load_var_default ${name}
	fi
	
	if [ -z "$(eval echo \$${name})" ]
	then
	    k_load_var_user ${name}
	fi

	k_save_var "${name}" "$(eval echo \$${name})"
    fi
    eval export ${name}="\$${name}"
}

#
# IP manipulation functions
# Asssume all networks are /24
#
function k_ip_split
{
    echo $1 | tr '.' ' '
}

function k_ip_join
{
    echo "$1.$2.$3.$4"
}

# First address of network ($1)
function k_ip_first
{
    local network=( $(k_ip_split $1) )
    network[3]=1

    k_ip_join ${network[@]}
}

function k_ip_last
{
    local network=( $(k_ip_split $1) )
    network[3]=254

    k_ip_join ${network[@]}
}

# Increment an IP ($1) with step ($2)
# Return 0 on success, 1 if out of bounds
function k_ip_incr
{
    local ip=( $(k_ip_split $1) )
    local i=$2
    local ret=0

    ip[3]=$(( ${ip[3]}+i ))
    if [ 255 -le ${ip[3]} ]; then
	ret=1
    else
	k_ip_join ${ip[@]}
    fi

    return $ret
}

#
# Services related functions
#
function k_enable_service
{
    k_log_progress "k_enable_service(): not implemented"
    k_log_error
    exit 1
}

function k_disable_service
{
    k_log_progress "k_disable_service(): not implemented"
    k_log_error
    exit 1
}
