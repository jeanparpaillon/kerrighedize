#!/usr/bin/env python
""" kerrighed-applet: manage Kerrighed cluster with kerrighed-manager through Dbus
"""
NAME = 'kerrighed-applet'
__longname__ = 'Kerrighed Applet'
__description__ = "Kerrighed Applet allows to monitor and manage a Kerrighed cluster"
__website__ = "http://kerrighed.org/"

__author__ = "Jean Parpaillon"
__copyright__ = "Copyright (C) 2010 Kerlabs"

__revision__ = "$Id$"
__version__ = "0.1"

import os, sys, signal, lockfile
import time, re
import logging, logging.handlers
from optparse import OptionParser
import daemon
import dbus, dbus.service, dbus.mainloop.glib
import pygtk
pygtk.require('2.0')
import gtk, gobject, pynotify, pango
import kerrighed

NOTIFY_TIMEOUT = 4500

# dbus constants shared between applet and manager
dbus_service = 'org.kerrighed.KerrighedManager'
dbus_interface_manager = dbus_service + '.Manager'
dbus_interface_applet = dbus_service + '.Applet'
dbus_path_manager = '/org/kerrighed/KerrighedManager/manager'
dbus_path_applet = '/org/kerrighed/KerrighedManager/applet'

log = logging.getLogger()

def get_data_dir():
   srcdatadir = os.path.abspath(os.path.join(os.path.join(os.path.dirname(sys.argv[0]), '..'), 'data'))
   if os.path.isdir(srcdatadir):
      return srcdatadir
   else:
      return '/usr/share/kerrighed-manager-applet'

def get_data_path(name):
   return os.path.join(get_data_dir(), name)

KERRIGHED_ICON_PATH = get_data_path('kerrighed.png')
PRESENT_ICON_PATH = get_data_path('node_present.png')
ONLINE_ICON_PATH = get_data_path('node_online.png')
STATUS_UNKNOWN_ICON_PATH = get_data_path('node_unknown.png')

CPU_ICON_PATH = get_data_path('cpu.png')
MEMORY_ICON_PATH = get_data_path('memory.png')

STATUS_POSSIBLE = 1
STATUS_PRESENT = 2
STATUS_ONLINE = 3

TITLE_TEXT_R = 0x5e / 255.0
TITLE_TEXT_G = 0x5e / 255.0
TITLE_TEXT_B = 0x5e / 255.0

re_cpu = re.compile(r'^processor\s+:.*$')
re_memory = re.compile(r'^MemTotal:\s+([0-9]+) kB.*$')

def get_cpu_from_path(path):
   ret = 0
   with open(path, 'r') as f:
      for line in f:
         if re_cpu.match(line):
            ret += 1
   return ret

def get_memory_from_path(path):
   ret = ''
   with open(path, 'r') as f:
      for line in f:
         m = re_memory.match(line)
         if m:
            ret = '%.2fGB' % (float(m.group(1)) / 1024.0 / 1024.0)
            break
   return ret

def get_allnodes_cpu():
   return get_cpu_from_path('/proc/nodes/cluster/cpuinfo')

def get_allnodes_memory():
   return get_memory_from_path('/proc/nodes/cluster/meminfo')

def get_node_cpu(nodeid):
   return get_cpu_from_path('/proc/nodes/node%i/cpuinfo' % nodeid)

def get_node_memory(nodeid):
   return get_memory_from_path('/proc/nodes/node%i/meminfo' % nodeid)


class AutoaddMenuItem(gtk.CheckMenuItem):
   def __init__(self, manager):
      self.manager = manager

      super(AutoaddMenuItem, self).__init__("Always add node to cluster")
      self.set_active(self.manager.GetAutoadd())
      self.connect('toggled', self.handle_toggleAutoadd)

   def handle_toggleAutoadd(self, widget):
      status = not self.manager.GetAutoadd()
      self.manager.SetAutoadd(status)

class NodeItem(gtk.MenuItem):
   icon_path = STATUS_UNKNOWN_ICON_PATH
   tooltip_text = 'Node in unknown status'

   def __init__(self, nodeid):
      super(NodeItem, self).__init__()
      self.nodeid = nodeid
      self.set_property('tooltip-text', self.__class__.tooltip_text)

      self.box = gtk.HBox(False, 6)
      self.add(self.box)
      self.icon = self.get_icon()
      self.box.pack_start(self.icon, False, False, 0)
      self.label = self.get_label()
      self.box.pack_start(self.label, True, True, 0)
      self.details = self.get_details()
      self.box.pack_end(self.details, False, True, 0)

      self.icon.show()
      self.label.show()
      self.details.show()

   def get_icon(self):
      item = gtk.Image()
      item.set_padding(2, 5)
      item.set_from_file(self.__class__.icon_path)
      return item

   def get_label(self):
      item = gtk.Label('Node %i' % self.nodeid)
      item.set_alignment(0.0, 0.5)
      return item

   def get_details(self):
      item = gtk.Image()
      return item

class PresentNodeItem(NodeItem):
   icon_path = PRESENT_ICON_PATH
   tooltip_text = 'Node ready to join'

class OnlineNodeItem(NodeItem):
   icon_path = ONLINE_ICON_PATH
   tooltip_text = 'Node added to the cluster'

   def get_details(self):
      box = gtk.HBox(False, 4)
      item = gtk.Image()
      item.set_from_file(CPU_ICON_PATH)
      box.pack_start(item)
      item = gtk.Label(str(get_node_cpu(self.nodeid)))
      box.pack_start(item)
      item = gtk.Image()
      item.set_from_file(MEMORY_ICON_PATH)
      box.pack_start(item)
      item = gtk.Label(get_node_memory(self.nodeid))
      box.pack_start(item)
      return box

class NodesMenu(gtk.Menu):
   def __init__(self, manager):
      self.manager = manager
      super(NodesMenu, self).__init__()

   def update(self):
      log.debug('Updating nodes menu')
      map(lambda child: self.remove(child), self.get_children())

      status = kerrighed.krg_nodes_status()
      self.addPresentNodes(status.get_present())
      #self.addPresentNodes(set([ i for i in range(9, 12)]))
      self.addOnlineNodes(status.get_online())
      #self.addOnlineNodes(set([ i for i in range(4) ]))

      item = self.get_menuTitle('Summary')
      self.append(item)
      item = gtk.MenuItem()
      item.add(self.get_summary())
      self.append(item)

   def get_summary(self):
      box = gtk.HBox(False, 4)
      item = gtk.Image()
      item.set_from_file(CPU_ICON_PATH)
      box.pack_start(item)
      item = gtk.Label(str(get_allnodes_cpu()))
      box.pack_start(item)
      item = gtk.Image()
      item.set_from_file(MEMORY_ICON_PATH)
      box.pack_start(item)
      item = gtk.Label(get_allnodes_memory())
      box.pack_start(item)
      return box

   def get_menuTitle(self, text):
      item = gtk.MenuItem(text)
      item.set_sensitive(False)
      label = item.get_child()
      label.set_markup("<span weight=\"bold\">%s</span>" % text)
      item.connect('expose-event', self.handle_exposeEvent)
      return item

   def get_menuComment(self, text):
      item = gtk.MenuItem(text)
      item.set_sensitive(False)
      label = item.get_child()
      label.set_markup("<span style=\"italic\" weight=\"bold\">%s</span>" % text)
      return item

   def get_nodesActionMenu(self, nodes, nodeCallback, allnodesCallback):
      menu = gtk.Menu()
      item = gtk.MenuItem('All nodes')
      item.connect('activate', allnodesCallback, nodes)
      menu.append(item)
      menu.append(gtk.SeparatorMenuItem())
      for node in nodes:
         item = gtk.MenuItem('Node %s' % node)
         item.connect('activate', nodeCallback, node)
         menu.append(item)
      return menu

   def addPresentNodes(self, nodes):
      self.append(self.get_menuTitle("Present nodes"))

      if len(nodes)==0:
         self.append(self.get_menuComment("No present node"))
      else:
         item = gtk.MenuItem('Add nodes')
         item.set_submenu(self.get_nodesActionMenu(nodes, self.handle_AddNode, self.handle_AddNodes))
         self.append(item)
         for node in nodes:
            self.append(PresentNodeItem(node))

   def addOnlineNodes(self, nodes):
      self.append(self.get_menuTitle("Online nodes"))

      if len(nodes)==0:
         self.append(self.get_menuComment("No online node"))
      else:
         item = gtk.MenuItem('Remove nodes')
         item.set_submenu(self.get_nodesActionMenu(nodes, self.handle_DelNode, self.handle_DelNodes))
         self.append(item)
         for node in nodes:
            self.append(OnlineNodeItem(node))

   def handle_AddNodes(self, item, nodes):
      log.debug('Adding nodes %s' % nodes)
      map(lambda node: self.manager.AddNode(node), nodes)

   def handle_AddNode(self, item, node):
      log.debug('Adding node %s' % node)
      self.manager.AddNode(node)

   def handle_DelNodes(self, nodes):
      log.debug('Removing nodes %s' % nodes)
      map(lambda node: self.manager.DelNode(node), nodes)

   def handle_DelNode(self, node):
      log.debug('Removing node %s' % node)
      self.manager.DelNode(node)

   def handle_exposeEvent(self, widget, event):
      width = 0
      height = 0
      extrawidth = 0
      extraheight = 0
      xpadding = 10.0
      ypadding = 5.0
      postpadding = 0.0

      label = widget.get_child()
      cr = label.get_window().cairo_create()

      # The drawing area we get is the whole menu; clip the drawing to the
      # event area, which should just be our menu item.
      cr.rectangle(gtk.gdk.Rectangle(event.area.x, event.area.y, event.area.width, event.area.height))
      cr.clip()

      # We also need to reposition the cairo context so that (0, 0) is the
      # top-left of where we're supposed to start drawing.
      allocation = widget.get_allocation()
      cr.translate(allocation.x, allocation.y)

      text = label.get_text()

      style = widget.get_style()
      desc = style.font_desc.copy()
      desc.set_variant(pango.VARIANT_SMALL_CAPS)
      desc.set_weight(pango.WEIGHT_SEMIBOLD)

      layout = cr.create_layout()
      layout.set_font_description(desc)
      layout.set_text(text)
      cr.update_layout(layout)
      (owidth, oheight) = layout.get_size()
      width = owidth / pango.SCALE
      height += oheight / pango.SCALE

      cr.save()

      cr.set_source_rgba(1.0, 1.0, 1.0, 0.0)
      cr.rectangle(0, 0, (width + 2 * xpadding), (height + ypadding + postpadding))
      cr.fill()

      # now the in-padding content
      cr.translate(xpadding , ypadding)
      cr.set_source_rgb(TITLE_TEXT_R, TITLE_TEXT_G, TITLE_TEXT_B)
      cr.move_to(extrawidth, extraheight)
      cr.show_layout(layout)

      cr.restore()

      widget.set_size_request(int(width + 2 * xpadding),
                              int(height + ypadding + postpadding))
      return True

   def show_all(self):
      self.update()
      super(NodesMenu, self).show_all()

class KerrighedApplet(gtk.StatusIcon):

   def __init__(self):
      self.nodes_notify = {}

      # Init dbus
      self.bus = dbus.SystemBus()
      while True:
         try:
            manager_proxy = self.bus.get_object(dbus_service, dbus_path_manager)
            log.debug("Connected to manager")
            break
         except dbus.exceptions.DBusException, dbe:
            # Retry
            log.debug("Could not connect to manager, will retry in 5 sec...")
            time.sleep(5)
            pass
      self.manager = dbus.Interface(manager_proxy, dbus_interface=dbus_interface_manager)

      self.bus.add_signal_receiver(self.handle_PresentToOnline, 'PresentToOnline',
                                   dbus_interface_manager, dbus_service, dbus_path_manager)
      self.bus.add_signal_receiver(self.handle_PresentToPossible, 'PresentToPossible',
                                   dbus_interface_manager, dbus_service, dbus_path_manager)
      self.bus.add_signal_receiver(self.handle_PossibleToPresent, 'PossibleToPresent',
                                   dbus_interface_manager, dbus_service, dbus_path_manager)
      self.bus.add_signal_receiver(self.handle_OnlineToPresent, 'OnlineToPresent',
                                   dbus_interface_manager, dbus_service, dbus_path_manager)
      self.bus.add_signal_receiver(self.handle_OnlineToPossible, 'OnlineToPossible',
                                   dbus_interface_manager, dbus_service, dbus_path_manager)
      self.bus.add_signal_receiver(self.handle_PossibleToOnline, 'PossibleToOnline',
                                   dbus_interface_manager, dbus_service, dbus_path_manager)

      # Init gtk stuff
      super(KerrighedApplet, self).__init__()
      self.set_from_file(KERRIGHED_ICON_PATH)
      self.set_visible(True)
      self.set_tooltip('Kerrighed')
      self.connect('popup-menu', self.handle_PopupMenu)
      self.connect('activate', self.handle_PopupNodesMenu)
      self.connect('query-tooltip', self.handle_QueryTooltip)
      self.set_visible(1)

      self.rightMenu = gtk.Menu()
      self.rightMenu.append(AutoaddMenuItem(self.manager))
      self.rightMenu.append(gtk.SeparatorMenuItem())

      menuItem = gtk.ImageMenuItem(gtk.STOCK_ABOUT)
      menuItem.connect('activate', self.handle_About)
      self.rightMenu.append(menuItem)

      menuItem = gtk.ImageMenuItem(gtk.STOCK_QUIT)
      menuItem.connect('activate', self.handle_Quit)
      self.rightMenu.append(menuItem)

      self.leftMenu = NodesMenu(self.manager)

      # Init notify
      pynotify.init(NAME)

   def handle_QueryTooltip(self, widget, x, y, keyboard_mode, tooltip):
      cluster_up = kerrighed.krg_cluster_status().is_up()
      if cluster_up:
         markup = '<span weight=\"bold\" >Kerrighed cluster: up</span>\n'

         status = kerrighed.krg_nodes_status()
         markup += 'Present nodes: %i\n' % status.num_present()
         markup += 'Online nodes: %i\n' % status.num_online()
         markup += 'Total CPU: %i\n' % get_allnodes_cpu()
         markup += 'Total RAM: %s' % get_allnodes_memory()
      else:
         markup = '<span weight=\"bold\" >Kerrighed cluster: down</span>'
      tooltip.set_markup(markup)
      return True

   def handle_About(self, widget):
      about = gtk.AboutDialog()
      about.set_program_name(__longname__)
      about.set_version(__version__)
      about.set_copyright(__copyright__)
      about.set_comments(__description__)
      about.set_website(__website__)
      about.set_logo(gtk.gdk.pixbuf_new_from_file(KERRIGHED_ICON_PATH))
      about.run()
      about.destroy()

   def handle_Quit(self, widget):
      gtk.main_quit()

   def handle_PopupNodesMenu(self, widget):
      self.leftMenu.show_all()
      self.leftMenu.popup(None, None, gtk.status_icon_position_menu,
                          1, gtk.get_current_event_time(), self)
      self.leftMenu.connect('hide', self.handle_PopupNodesMenuHide)

   def handle_PopupNodesMenuHide(self, widget):
      return True

   def handle_PopupMenu(self, widget, button, time):
      self.rightMenu.show_all()
      self.rightMenu.popup(None, None, gtk.status_icon_position_menu,
                           3, time, self)

   def handle_PresentToOnline(self, node):
      self.NotifyOnline(node)
      log.debug('Received PresentToOnline: %i' % node)

   def handle_PresentToPossible(self, node):
      self.NotifyPossible(node)
      log.debug('Received PresentToPossible: %i' % node)

   def handle_PossibleToPresent(self, node):
      self.NotifyPresent(node)
      log.debug('Received PossibleToPresent: %i' % node)

   def handle_OnlineToPresent(self, node):
      self.NotifyPresent(node)
      log.debug('Received OnlineToPresent: %i' % node)

   def handle_OnlineToPossible(self, node):
      self.NotifyPossible(node)
      log.debug('Received OnlineToPossible: %i' % node)

   def handle_PossibleToOnline(self, node):
      self.NotifyOnline(node)
      log.debug('Received PossibleToOnline: %i' % node)

   def handle_AddAction(self, notify, action):
      node = int(action.replace('add', ''))
      notify.close()
      log.debug('Adding node %i to the cluster' % node)
      self.manager.AddNode(node)

   def handle_setAutoadd(self, notify, action):
      assert('setAutoadd' == action)
      log.debug('Set autoadd to True')
      self.manager.SetAutoadd(True)
      notify.close()

   def NotifyPossible(self, node):
      n = self._GetNotify(node, "Has left the cluster")
      n.show()

   def NotifyPresent(self, node):
      n = self._GetNotify(node, "Is ready for joining the cluster")
      n.add_action("add%i" % node, "Add", self.handle_AddAction)
      if not self.manager.GetAutoadd():
         n.add_action("setAutoadd", "Always add", self.handle_setAutoadd)
      n.show()

   def NotifyOnline(self, node):
      n = self._GetNotify(node, "Has join the cluster")
      n.show()

   def _GetNotify(self, node, msg):
      title = 'Node %i' % node
      icon_uri = "file://" + KERRIGHED_ICON_PATH

      notify = pynotify.Notification(title, msg, icon_uri)
      notify.set_timeout(NOTIFY_TIMEOUT)
      self.nodes_notify[node] = notify
      return self.nodes_notify[node]

   def run(self):
      gtk.main()

def main():
   ret = 0

   parser = OptionParser()
   parser.add_option("-d", "--debug",
                     action="store_true", dest="debug", default=False,
                     help="print debug messages")
   (options, args) = parser.parse_args()

   if options.debug:
      log.setLevel(logging.DEBUG)
      handler = logging.StreamHandler(sys.stderr)
   else:
      log.setLevel(logging.INFO)
      handler = logging.handlers.SysLogHandler(address='/dev/log')
   fmt_head = '%s[%u]' % (NAME, os.getpid())
   handler.setFormatter(logging.Formatter(fmt_head + ": %(message)s"))
   log.addHandler(handler)

   dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
   applet = KerrighedApplet()
   applet.run()

   sys.exit(ret)

if __name__ == "__main__":
   main()
