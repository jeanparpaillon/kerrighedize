#!/usr/bin/env python
""" kerrighed-manager: monitor nodes presence and notify clients
"""

__author__ = "Jean Parpaillon"
__copyright__ = "Copyright (C) 2010 Kerlabs"

__revision__ = "$Id$"
__version__ = "0.1"

import os, sys, signal, time, lockfile
import logging, logging.handlers
from optparse import OptionParser
import daemon
import dbus, dbus.service, dbus.mainloop.glib
import gobject
import kerrighed

NAME = 'kerrighed-manager'
POLLTIME = 1000 # ms
PIDFILE = '/var/run/KerrighedManager.pid'

# dbus constants shared between applet and manager
dbus_service = 'org.kerrighed.KerrighedManager'
dbus_interface_manager = dbus_service + '.Manager'
dbus_interface_applet = dbus_service + '.Applet'
dbus_path_manager = '/org/kerrighed/KerrighedManager/manager'
dbus_path_applet = '/org/kerrighed/KerrighedManager/applet'

STATUS_POSSIBLE = 1
STATUS_PRESENT = 2
STATUS_ONLINE = 3

log = logging.getLogger()

class KerrighedManager(dbus.service.Object):
   def __init__(self, autoadd=False):
      bus = dbus.service.BusName(dbus_service, dbus.SystemBus())

      dbus.service.Object.__init__(self, bus, dbus_path_manager)
      self.autoadd = autoadd
      self.online = kerrighed.krg_node_set()
      self.present = kerrighed.krg_node_set()
      log.info('autoadd is set to %s' % self.autoadd)

   def run(self):
      self.update()

      loop = gobject.MainLoop()
      gobject.timeout_add(POLLTIME, self.update)
      loop.run()

   @dbus.service.method(dbus_interface=dbus_interface_manager,
                        in_signature='', out_signature='a{ui}')
   def GetNodesStatus(self):
      ret = {}
      try:
         status = kerrighed.krg_nodes_status()
         for node in status.get_online():
            ret[node] = STATUS_ONLINE
         for node in status.get_present():
            ret[node] = STATUS_PRESENT
      except Exception, e:
         log.error(str(e))
         sys.exit(1)

      return ret

   @dbus.service.method(dbus_interface=dbus_interface_manager,
                        in_signature='', out_signature='b')
   def GetAutoadd(self):
      return self.autoadd

   @dbus.service.method(dbus_interface=dbus_interface_manager,
                        in_signature='b', out_signature='b')
   def SetAutoadd(self, value):
      log.info('autoadd is set to %s' % value)
      self.autoadd = value
      return self.autoadd

   @dbus.service.method(dbus_interface=dbus_interface_manager,
                        in_signature='u', out_signature='b')
   def AddNode(self, node):
      log.info('adding node %i to the cluster' % node)
      s = kerrighed.krg_node_set()
      s.add(node)
      kerrighed.krg_nodes_add(s)
      return True

   @dbus.service.method(dbus_interface=dbus_interface_manager,
                        in_signature='u', out_signature='b')
   def DelNode(self, node):
      log.info('removing node %i from the cluster' % node)
      s = kerrighed.krg_node_set()
      s.add(node)
      kerrighed.krg_nodes_remove(s)
      return True

   @dbus.service.signal(dbus_interface=dbus_interface_manager, signature='u')
   def PresentToOnline(self, node):
      log.info('node %i has join the cluster' % node)

   @dbus.service.signal(dbus_interface=dbus_interface_manager, signature='u')
   def PresentToPossible(self, node):
      log.info('node %i has disappeared' % node)

   @dbus.service.signal(dbus_interface=dbus_interface_manager, signature='u')
   def PossibleToPresent(self, node):
      if self.autoadd:
         self.AddNode(node)
      log.info('node %i is ready for joining' % node)

   @dbus.service.signal(dbus_interface=dbus_interface_manager, signature='u')
   def OnlineToPresent(self, node):
      log.info('node %i has left the cluster' % node)

   @dbus.service.signal(dbus_interface=dbus_interface_manager, signature='u')
   def OnlineToPossible(self, node):
      log.info('node %i has disappeared' % node)

   @dbus.service.signal(dbus_interface=dbus_interface_manager, signature='u')
   def PossibleToOnline(self, node):
      log.info('node %i has join the cluster' % node)

   def update(self):
      log.debug("Update nodes status")
      try:
         status = kerrighed.krg_nodes_status()
         for node in status.get_online():
            if node in self.online:
               continue
            elif node in self.present:
               self.PresentToOnline(node)
               self.present.discard(node)
               self.online.add(node)
            else:
               self.PossibleToOnline(node)
               self.online.add(node)
         for node in status.get_present():
            if node in self.online:
               self.OnlineToPresent(node)
               self.online.discard(node)
               self.present.add(node)
            elif node in self.present:
               continue
            else:
               self.PossibleToPresent(node)
               self.present.add(node)
         for node in status.get_possible():
            if node in self.online:
               self.OnlineToPossible(node)
               self.online.discard(node)
            elif node in self.present:
               self.PresentToPossible(node)
               self.present.discard(node)
      except Exception, e:
         log.error(str(e))
         sys.exit(1)

      return True

def handle_exit(value):
   log.info('Exiting...')
   sys.exit(value)

class ForegroundContext(object):
   def __enter__(self):
      return self
   def __exit__(self, type, value, traceback):
      handle_exit(value)

def main():
   context = None
   pidfile = PIDFILE
   autoadd = False
   ret = 0

   parser = OptionParser()
   parser.add_option("-d", "--debug",
                     action="store_true", dest="debug", default=False,
                     help="print debug messages")
   parser.add_option("-D", "--foreground",
                     action="store_true", dest="foreground", default=False,
                     help="don't daemonize")
   parser.add_option("-a", "--autoadd",
                     action="store_true", dest="autoadd", default=False,
                     help="automatically add present nodes")
   parser.add_option("-f", "--pid-file", dest="pidfile",
                     help="daemon pid file", metavar="FILE")
   (options, args) = parser.parse_args()

   if options.pidfile:
      pidfile = options.pidfile
   autoadd = options.autoadd

   if options.debug:
      log.setLevel(logging.DEBUG)
   else:
      log.setLevel(logging.INFO)
   if options.foreground:
      context = ForegroundContext()
   else:
      context = daemon.DaemonContext(pidfile=lockfile.FileLock(pidfile))

   with context:
      if options.foreground:
         handler = logging.StreamHandler(sys.stderr)
      else:
         handler = logging.handlers.SysLogHandler(address='/dev/log')
      fmt_head = '%s[%u]' % (NAME, os.getpid())
      handler.setFormatter(logging.Formatter(fmt_head + ": %(message)s"))
      log.addHandler(handler)

      dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
      km = KerrighedManager(autoadd=autoadd)
      km.run()

   sys.exit(ret)

if __name__ == "__main__":
   main()
